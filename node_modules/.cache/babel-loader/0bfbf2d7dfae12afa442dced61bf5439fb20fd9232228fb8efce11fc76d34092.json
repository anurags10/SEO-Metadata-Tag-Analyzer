{"ast":null,"code":"// Proxy Service for fetching website content\n// Multiple fallback options to handle CORS restrictions\n\nconst PROXY_SERVICES = [{\n  name: 'CORS Anywhere (Demo)',\n  url: 'https://cors-anywhere.herokuapp.com/',\n  transform: data => data,\n  working: true,\n  requiresActivation: true\n}, {\n  name: 'CORS Proxy',\n  url: 'https://corsproxy.io/?',\n  transform: data => data,\n  working: true\n}, {\n  name: 'AllOrigins',\n  url: 'https://api.allorigins.win/get',\n  transform: data => data.contents,\n  working: true\n}, {\n  name: 'CORS Anywhere (Alternative)',\n  url: 'https://cors-anywhere.herokuapp.com/',\n  transform: data => data,\n  working: true,\n  requiresActivation: true\n}];\nexport const fetchWebsiteContent = async url => {\n  var _lastError;\n  let lastError = null;\n  let activationMessage = null;\n\n  // Try each proxy service until one works\n  for (const proxy of PROXY_SERVICES) {\n    if (!proxy.working) continue;\n    try {\n      console.log(`Trying ${proxy.name} proxy...`);\n      let proxyUrl;\n      if (proxy.name.includes('CORS Anywhere')) {\n        proxyUrl = proxy.url + url;\n      } else if (proxy.name === 'CORS Proxy') {\n        proxyUrl = proxy.url + encodeURIComponent(url);\n      } else {\n        proxyUrl = `${proxy.url}?url=${encodeURIComponent(url)}`;\n      }\n      const response = await fetch(proxyUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n          'User-Agent': 'Mozilla/5.0 (compatible; SEO-Analyzer/1.0)'\n        },\n        timeout: 15000 // 15 second timeout\n      });\n      if (!response.ok) {\n        if (response.status === 403 && proxy.requiresActivation) {\n          activationMessage = `This proxy service requires activation. Visit ${proxy.url} and click \"Request temporary access to the demo server\"`;\n          throw new Error(`HTTP ${response.status}: Requires activation`);\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.text();\n      const transformedData = proxy.transform(data);\n      if (transformedData && transformedData.length > 0) {\n        console.log(`✅ Successfully fetched content using ${proxy.name}`);\n        return transformedData;\n      } else {\n        throw new Error('Empty content received');\n      }\n    } catch (error) {\n      console.warn(`${proxy.name} failed:`, error.message);\n      lastError = error;\n\n      // Mark this proxy as not working for future requests\n      if (error.message.includes('429') || error.message.includes('rate limit') || error.message.includes('403') || error.message.includes('blocked')) {\n        proxy.working = false;\n      }\n      continue;\n    }\n  }\n\n  // If all proxies failed, provide helpful error message\n  let errorMessage = `All proxy services failed. `;\n  if (activationMessage) {\n    errorMessage += `\\n\\nSome services require activation: ${activationMessage}`;\n  }\n  errorMessage += `\\n\\nLast error: ${((_lastError = lastError) === null || _lastError === void 0 ? void 0 : _lastError.message) || 'Unknown error'}. `;\n  errorMessage += 'This might be due to network restrictions, proxy service limitations, or all proxy services being unavailable.';\n  throw new Error(errorMessage);\n};\n\n// Alternative method: Use browser extension or manual input\nexport const getManualInputInstructions = () => {\n  return {\n    title: 'Manual HTML Input',\n    description: 'If automatic fetching fails, you can manually input the HTML content',\n    steps: ['1. Visit the website you want to analyze in a new tab', '2. Right-click and select \"View Page Source\" (or press Ctrl+U / Cmd+U)', '3. Copy all the HTML content (Ctrl+A, Ctrl+C)', '4. Paste it in the manual input field below']\n  };\n};\n\n// Validate HTML content\nexport const validateHTML = htmlContent => {\n  if (!htmlContent || typeof htmlContent !== 'string') {\n    return {\n      valid: false,\n      error: 'Content must be a non-empty string'\n    };\n  }\n  if (htmlContent.length < 100) {\n    return {\n      valid: false,\n      error: 'Content seems too short to be valid HTML'\n    };\n  }\n  if (!htmlContent.includes('<html') && !htmlContent.includes('<body')) {\n    return {\n      valid: false,\n      error: 'Content does not appear to be valid HTML'\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n// Get working proxy status for debugging\nexport const getProxyStatus = () => {\n  return PROXY_SERVICES.map(proxy => ({\n    name: proxy.name,\n    working: proxy.working,\n    requiresActivation: proxy.requiresActivation || false\n  }));\n};","map":{"version":3,"names":["PROXY_SERVICES","name","url","transform","data","working","requiresActivation","contents","fetchWebsiteContent","_lastError","lastError","activationMessage","proxy","console","log","proxyUrl","includes","encodeURIComponent","response","fetch","method","headers","timeout","ok","status","Error","statusText","text","transformedData","length","error","warn","message","errorMessage","getManualInputInstructions","title","description","steps","validateHTML","htmlContent","valid","getProxyStatus","map"],"sources":["/Users/anuragsingh/Documents/Projects/SEO Analyser/src/utils/proxyService.js"],"sourcesContent":["// Proxy Service for fetching website content\n// Multiple fallback options to handle CORS restrictions\n\nconst PROXY_SERVICES = [\n  {\n    name: 'CORS Anywhere (Demo)',\n    url: 'https://cors-anywhere.herokuapp.com/',\n    transform: (data) => data,\n    working: true,\n    requiresActivation: true\n  },\n  {\n    name: 'CORS Proxy',\n    url: 'https://corsproxy.io/?',\n    transform: (data) => data,\n    working: true\n  },\n  {\n    name: 'AllOrigins',\n    url: 'https://api.allorigins.win/get',\n    transform: (data) => data.contents,\n    working: true\n  },\n  {\n    name: 'CORS Anywhere (Alternative)',\n    url: 'https://cors-anywhere.herokuapp.com/',\n    transform: (data) => data,\n    working: true,\n    requiresActivation: true\n  }\n];\n\nexport const fetchWebsiteContent = async (url) => {\n  let lastError = null;\n  let activationMessage = null;\n  \n  // Try each proxy service until one works\n  for (const proxy of PROXY_SERVICES) {\n    if (!proxy.working) continue;\n    \n    try {\n      console.log(`Trying ${proxy.name} proxy...`);\n      \n      let proxyUrl;\n      if (proxy.name.includes('CORS Anywhere')) {\n        proxyUrl = proxy.url + url;\n      } else if (proxy.name === 'CORS Proxy') {\n        proxyUrl = proxy.url + encodeURIComponent(url);\n      } else {\n        proxyUrl = `${proxy.url}?url=${encodeURIComponent(url)}`;\n      }\n      \n      const response = await fetch(proxyUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n          'User-Agent': 'Mozilla/5.0 (compatible; SEO-Analyzer/1.0)'\n        },\n        timeout: 15000 // 15 second timeout\n      });\n      \n      if (!response.ok) {\n        if (response.status === 403 && proxy.requiresActivation) {\n          activationMessage = `This proxy service requires activation. Visit ${proxy.url} and click \"Request temporary access to the demo server\"`;\n          throw new Error(`HTTP ${response.status}: Requires activation`);\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.text();\n      const transformedData = proxy.transform(data);\n      \n      if (transformedData && transformedData.length > 0) {\n        console.log(`✅ Successfully fetched content using ${proxy.name}`);\n        return transformedData;\n      } else {\n        throw new Error('Empty content received');\n      }\n      \n    } catch (error) {\n      console.warn(`${proxy.name} failed:`, error.message);\n      lastError = error;\n      \n      // Mark this proxy as not working for future requests\n      if (error.message.includes('429') || error.message.includes('rate limit') || \n          error.message.includes('403') || error.message.includes('blocked')) {\n        proxy.working = false;\n      }\n      \n      continue;\n    }\n  }\n  \n  // If all proxies failed, provide helpful error message\n  let errorMessage = `All proxy services failed. `;\n  \n  if (activationMessage) {\n    errorMessage += `\\n\\nSome services require activation: ${activationMessage}`;\n  }\n  \n  errorMessage += `\\n\\nLast error: ${lastError?.message || 'Unknown error'}. `;\n  errorMessage += 'This might be due to network restrictions, proxy service limitations, or all proxy services being unavailable.';\n  \n  throw new Error(errorMessage);\n};\n\n// Alternative method: Use browser extension or manual input\nexport const getManualInputInstructions = () => {\n  return {\n    title: 'Manual HTML Input',\n    description: 'If automatic fetching fails, you can manually input the HTML content',\n    steps: [\n      '1. Visit the website you want to analyze in a new tab',\n      '2. Right-click and select \"View Page Source\" (or press Ctrl+U / Cmd+U)',\n      '3. Copy all the HTML content (Ctrl+A, Ctrl+C)',\n      '4. Paste it in the manual input field below'\n    ]\n  };\n};\n\n// Validate HTML content\nexport const validateHTML = (htmlContent) => {\n  if (!htmlContent || typeof htmlContent !== 'string') {\n    return { valid: false, error: 'Content must be a non-empty string' };\n  }\n  \n  if (htmlContent.length < 100) {\n    return { valid: false, error: 'Content seems too short to be valid HTML' };\n  }\n  \n  if (!htmlContent.includes('<html') && !htmlContent.includes('<body')) {\n    return { valid: false, error: 'Content does not appear to be valid HTML' };\n  }\n  \n  return { valid: true };\n};\n\n// Get working proxy status for debugging\nexport const getProxyStatus = () => {\n  return PROXY_SERVICES.map(proxy => ({\n    name: proxy.name,\n    working: proxy.working,\n    requiresActivation: proxy.requiresActivation || false\n  }));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}