{"ast":null,"code":"// Proxy Service for fetching website content\n// Multiple fallback options to handle CORS restrictions\n\nconst PROXY_SERVICES = [{\n  name: 'AllOrigins',\n  url: 'https://api.allorigins.win/get',\n  transform: data => data.contents,\n  working: true\n}, {\n  name: 'CORS Anywhere',\n  url: 'https://cors-anywhere.herokuapp.com/',\n  transform: data => data,\n  working: true\n}, {\n  name: 'CORS Proxy',\n  url: 'https://corsproxy.io/?',\n  transform: data => data,\n  working: true\n}];\nexport const fetchWebsiteContent = async url => {\n  var _lastError;\n  let lastError = null;\n\n  // Try each proxy service until one works\n  for (const proxy of PROXY_SERVICES) {\n    if (!proxy.working) continue;\n    try {\n      console.log(`Trying ${proxy.name} proxy...`);\n      let proxyUrl;\n      if (proxy.name === 'CORS Anywhere') {\n        proxyUrl = proxy.url + url;\n      } else if (proxy.name === 'CORS Proxy') {\n        proxyUrl = proxy.url + encodeURIComponent(url);\n      } else {\n        proxyUrl = `${proxy.url}?url=${encodeURIComponent(url)}`;\n      }\n      const response = await fetch(proxyUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n          'User-Agent': 'Mozilla/5.0 (compatible; SEO-Analyzer/1.0)'\n        },\n        timeout: 10000 // 10 second timeout\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.text();\n      const transformedData = proxy.transform(data);\n      if (transformedData && transformedData.length > 0) {\n        console.log(`✅ Successfully fetched content using ${proxy.name}`);\n        return transformedData;\n      } else {\n        throw new Error('Empty content received');\n      }\n    } catch (error) {\n      console.warn(`${proxy.name} failed:`, error.message);\n      lastError = error;\n\n      // Mark this proxy as not working for future requests\n      if (error.message.includes('429') || error.message.includes('rate limit')) {\n        proxy.working = false;\n      }\n      continue;\n    }\n  }\n\n  // If all proxies failed, throw a comprehensive error\n  throw new Error(`All proxy services failed. Last error: ${((_lastError = lastError) === null || _lastError === void 0 ? void 0 : _lastError.message) || 'Unknown error'}. ` + 'This might be due to network restrictions or all proxy services being unavailable.');\n};\n\n// Alternative method: Use browser extension or manual input\nexport const getManualInputInstructions = () => {\n  return {\n    title: 'Manual HTML Input',\n    description: 'If automatic fetching fails, you can manually input the HTML content',\n    steps: ['1. Visit the website you want to analyze in a new tab', '2. Right-click and select \"View Page Source\" (or press Ctrl+U / Cmd+U)', '3. Copy all the HTML content (Ctrl+A, Ctrl+C)', '4. Paste it in the manual input field below']\n  };\n};\n\n// Validate HTML content\nexport const validateHTML = htmlContent => {\n  if (!htmlContent || typeof htmlContent !== 'string') {\n    return {\n      valid: false,\n      error: 'Content must be a non-empty string'\n    };\n  }\n  if (htmlContent.length < 100) {\n    return {\n      valid: false,\n      error: 'Content seems too short to be valid HTML'\n    };\n  }\n  if (!htmlContent.includes('<html') && !htmlContent.includes('<body')) {\n    return {\n      valid: false,\n      error: 'Content does not appear to be valid HTML'\n    };\n  }\n  return {\n    valid: true\n  };\n};","map":{"version":3,"names":["PROXY_SERVICES","name","url","transform","data","contents","working","fetchWebsiteContent","_lastError","lastError","proxy","console","log","proxyUrl","encodeURIComponent","response","fetch","method","headers","timeout","ok","Error","status","statusText","text","transformedData","length","error","warn","message","includes","getManualInputInstructions","title","description","steps","validateHTML","htmlContent","valid"],"sources":["/Users/anuragsingh/Documents/Projects/SEO Analyser/src/utils/proxyService.js"],"sourcesContent":["// Proxy Service for fetching website content\n// Multiple fallback options to handle CORS restrictions\n\nconst PROXY_SERVICES = [\n  {\n    name: 'AllOrigins',\n    url: 'https://api.allorigins.win/get',\n    transform: (data) => data.contents,\n    working: true\n  },\n  {\n    name: 'CORS Anywhere',\n    url: 'https://cors-anywhere.herokuapp.com/',\n    transform: (data) => data,\n    working: true\n  },\n  {\n    name: 'CORS Proxy',\n    url: 'https://corsproxy.io/?',\n    transform: (data) => data,\n    working: true\n  }\n];\n\nexport const fetchWebsiteContent = async (url) => {\n  let lastError = null;\n  \n  // Try each proxy service until one works\n  for (const proxy of PROXY_SERVICES) {\n    if (!proxy.working) continue;\n    \n    try {\n      console.log(`Trying ${proxy.name} proxy...`);\n      \n      let proxyUrl;\n      if (proxy.name === 'CORS Anywhere') {\n        proxyUrl = proxy.url + url;\n      } else if (proxy.name === 'CORS Proxy') {\n        proxyUrl = proxy.url + encodeURIComponent(url);\n      } else {\n        proxyUrl = `${proxy.url}?url=${encodeURIComponent(url)}`;\n      }\n      \n      const response = await fetch(proxyUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n          'User-Agent': 'Mozilla/5.0 (compatible; SEO-Analyzer/1.0)'\n        },\n        timeout: 10000 // 10 second timeout\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.text();\n      const transformedData = proxy.transform(data);\n      \n      if (transformedData && transformedData.length > 0) {\n        console.log(`✅ Successfully fetched content using ${proxy.name}`);\n        return transformedData;\n      } else {\n        throw new Error('Empty content received');\n      }\n      \n    } catch (error) {\n      console.warn(`${proxy.name} failed:`, error.message);\n      lastError = error;\n      \n      // Mark this proxy as not working for future requests\n      if (error.message.includes('429') || error.message.includes('rate limit')) {\n        proxy.working = false;\n      }\n      \n      continue;\n    }\n  }\n  \n  // If all proxies failed, throw a comprehensive error\n  throw new Error(\n    `All proxy services failed. Last error: ${lastError?.message || 'Unknown error'}. ` +\n    'This might be due to network restrictions or all proxy services being unavailable.'\n  );\n};\n\n// Alternative method: Use browser extension or manual input\nexport const getManualInputInstructions = () => {\n  return {\n    title: 'Manual HTML Input',\n    description: 'If automatic fetching fails, you can manually input the HTML content',\n    steps: [\n      '1. Visit the website you want to analyze in a new tab',\n      '2. Right-click and select \"View Page Source\" (or press Ctrl+U / Cmd+U)',\n      '3. Copy all the HTML content (Ctrl+A, Ctrl+C)',\n      '4. Paste it in the manual input field below'\n    ]\n  };\n};\n\n// Validate HTML content\nexport const validateHTML = (htmlContent) => {\n  if (!htmlContent || typeof htmlContent !== 'string') {\n    return { valid: false, error: 'Content must be a non-empty string' };\n  }\n  \n  if (htmlContent.length < 100) {\n    return { valid: false, error: 'Content seems too short to be valid HTML' };\n  }\n  \n  if (!htmlContent.includes('<html') && !htmlContent.includes('<body')) {\n    return { valid: false, error: 'Content does not appear to be valid HTML' };\n  }\n  \n  return { valid: true };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}